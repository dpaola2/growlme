#!/usr/bin/env python
#
# usage:
#   growlme <command>
#
# Runs <command> in a subshell, and notifies growl of success or failure
# error codes on completion. The success/failure messages can be customized
# on the command line. The growl remote password can be supplied on the
# command line or provided in a '~/.growlpass' file.
#
# The first (largest) section of this code is Rui Carmo's netgrowl.py:
#   http://the.taoofmac.com/space/Projects/netgrowl
#
# Copyright 2004 Rui Carmo <http://the.taoofmac.com>
# Copyright 2010 Greg Brown <geb@pobox.com>
# Copyright 2010 Robey Pointer <robeypointer@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy
# of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

from optparse import OptionParser
import os
import subprocess
import sys
try:
	from gntp.notifier import GrowlNotifier
	import logging
	logging.basicConfig(level=logging.WARNING)
except:
	from Growl import GrowlNotifier

class GrowlMeNotifier(GrowlNotifier):
	applicationName = 'GrowlMe'
	notifications = ['Success','Failure']

class GrowlMeParser(OptionParser):
	def __init__(self):
		OptionParser.__init__(self,usage='usage: %prog [options] <command...>')
		self.disable_interspersed_args()
		self.add_option("-H", "--host", dest='host', default='localhost')
		self.add_option("-P", "--password", dest='password', default='')
		self.add_option("-m", "--message", dest='success_text', metavar='TEXT', help='message to display on success')
		self.add_option("--fail", dest='fail_text', metavar='TEXT', help='message to display on failure')
		self.add_option('--port',dest='port',default=23055)
		self.add_option("-t", "--title", dest='title', help='growl title')
	def parse_args(self):
		opts, args = OptionParser.parse_args(self)
		if opts.title is None:
			opts.title = 'growlme'
		if opts.success_text is None:
			opts.success_text = "Succeeded"
		if opts.fail_text is None:
			opts.fail_text = "FAILED"
		if not args:
			parser.error("must provide a command to execute")
		return opts, args

class GrowlMePopen(subprocess.Popen):
	def wait(self):
		while True:
			data = self.stdout.read(128)
			if data == "":
				break
			sys.stdout.write(data)
		return subprocess.Popen.wait(self)

if __name__ == '__main__':
	(opts, args) = GrowlMeParser().parse_args()
	
	exit_code = GrowlMePopen(args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, bufsize=-1).wait()
	
	g = GrowlMeNotifier(
		hostname=opts.host,
		port=opts.port,
		password=opts.password			
	)
	g.register()
	if exit_code == 0:
		g.notify('Success',opts.title,opts.success_text)
	else:
		g.notify('Failure',opts.title,opts.fail_text)
	
	
